
name: build
on:
  release:
    types:
      - released
  workflow_dispatch: {}
jobs:
  prebuild:
    strategy:
      matrix:
        os:
          - windows-2019
          - ubuntu-18.04
          - macos-latest
    name: Prebuild on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm install --ignore-scripts
      - if: matrix.os == 'ubuntu-18.04'
        run: |
          curl -O https://litesync.io/download/litesync-free-linux-x86_64.tar.gz
          tar xf litesync-free-linux-x86_64.tar.gz
          sudo bash ./install
      - if: matrix.os == 'macos-latest'
        run: |
          curl -O https://litesync.io/download/litesync-free-mac-x86_64.tar.gz
          tar xf litesync-free-mac-x86_64.tar.gz
          sudo sh ./install
      - if: matrix.os == 'windows-2019'
        run: |
          curl.exe -O https://litesync.io/download/litesync-free-windows-x86_64.tar.gz
          cp litesync-free-windows-x86_64.tar.gz deps
          cd deps
          tar xf litesync-free-windows-x86_64.tar.gz
      - run: npm install --ignore-scripts
      - run: npx --no-install prebuild -r node -t 14.0.0 -t 16.0.0 -t 18.0.0 --include-regex 'better_sqlite3.node$'
      # - run: npx --no-install prebuild -r electron -t 16.0.0 -t 17.0.0 -t 18.0.0 -t 19.0.0 -t 20.0.0 -t 21.0.0 -t 22.0.0 --include-regex 'better_sqlite3.node$'
      # - if: matrix.os == 'windows-2019'
      #   run: |
      #     curl.exe -O https://litesync.io/download/litesync-free-windows-x86.tar.gz
      #     cp litesync-free-windows-x86.tar.gz deps
      #     cd deps
      #     tar xf litesync-free-windows-x86.tar.gz
      #     cd ..
      #     npx --no-install prebuild -r electron -t 16.0.0 -t 17.0.0 -t 18.0.0 -t 19.0.0 -t 20.0.0 -t 21.0.0 -t 22.0.0 --include-regex 'better_sqlite3.node$' --arch ia32
      - if: matrix.os == 'macos-latest'
        run: |
          curl -O https://litesync.io/download/litesync-free-mac-arm64.tar.gz
          tar xf litesync-free-mac-arm64.tar.gz
          sudo sh ./install
          npx --no-install prebuild -r electron -t 16.0.0 -t 17.0.0 -t 18.0.0 -t 19.0.0 -t 20.0.0 -t 21.0.0 -t 22.0.0 --include-regex 'better_sqlite3.node$' --arch arm64
      - name: Upload prebuild
        uses: actions/upload-artifact@v3
        with:
          name: prebuild-${{matrix.os}}
          path: prebuilds


  prebuild-alpine:
    name: Prebuild on alpine
    runs-on: ubuntu-latest
    container: node:16-alpine
    steps:
      - uses: actions/checkout@v2
      - run: apk add build-base git python3 curl --update-cache
      - run: npm install --ignore-scripts
      - run: |
          curl -O https://litesync.io/download/litesync-free-linux-alpine.tar.gz
          tar xf litesync-free-linux-alpine.tar.gz
          set -e
          set -x
          mkdir -p /usr/local/bin
          mkdir -p /usr/local/lib
          mkdir -p /usr/local/include
          cp liblitesync.so.0.0.1 /usr/local/lib/
          cd /usr/local/lib
          ln -sf liblitesync.so.0.0.1 liblitesync.so.0
          ln -sf liblitesync.so.0 liblitesync.so
          cd -
          mkdir -p /usr/local/lib/litesync
          cd /usr/local/lib/litesync
          ln -sf ../liblitesync.so.0.0.1 libsqlite3.so.0
          ln -sf libsqlite3.so.0 libsqlite3.so
          cd -
          cp *.h /usr/local/include/
          cp sqlite3 /usr/local/bin/
          ldconfig /etc/ld.so.conf.d
          echo done
      - run: npx --no-install prebuild -r node -t 14.0.0 -t 16.0.0 -t 18.0.0 --include-regex 'better_sqlite3.node$'
      - name: Upload prebuild
        uses: actions/upload-artifact@v3
        with:
          name: prebuild-alpine
          path: prebuilds

  # Disabling because there's no Alpine+Arm binary for litesync
  # prebuild-alpine-arm:
  #   strategy:
  #     matrix:
  #       arch:
  #         - arm64
  #   name: Prebuild on alpine (${{ matrix.arch }})
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: docker/setup-qemu-action@v1
  #     - run: |
  #         docker run --rm -v $(pwd):/tmp/project --entrypoint /bin/sh --platform linux/${{ matrix.arch }} node:16-alpine -c "\
  #         apk add build-base git python3 curl --update-cache && \
  #         cd /tmp/project && \
  #         npm install --ignore-scripts && \
  #         curl -O https://litesync.io/download/litesync-free-linux-aarch64.tar.gz && \
  #         tar xf litesync-free-linux-aarch64.tar.gz && \
  #         sh ./install
  #         npx --no-install prebuild -r node -t 14.0.0 -t 16.0.0 -t 18.0.0 --include-regex 'better_sqlite3.node$'"
  #     - name: Upload prebuild
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: prebuild-alpine-${{matrix.arch}}
  #         path: prebuilds

  prebuild-linux-arm64:
    strategy:
      matrix:
        arch:
          - arm64
    name: Prebuild on Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - run: |
          docker run --rm -v $(pwd):/tmp/project --entrypoint /bin/sh --platform linux/${{ matrix.arch }} node:16 -c "\
          cd /tmp/project && \
          npm install --ignore-scripts && \
          curl -O https://litesync.io/download/litesync-free-linux-aarch64.tar.gz && \
          tar xf litesync-free-linux-aarch64.tar.gz && \
          sh ./install && \
          npx --no-install prebuild -r node -t 14.0.0 -t 16.0.0 -t 18.0.0 --include-regex 'better_sqlite3.node$'"
      - name: Upload prebuild
        uses: actions/upload-artifact@v3
        with:
          name: prebuild-${{matrix.os}}
          path: prebuilds
  prebuild-linux-armv7:
    strategy:
      matrix:
        arch:
          - arm/v7
    name: Prebuild on Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - run: |
          docker run --rm -v $(pwd):/tmp/project --entrypoint /bin/sh --platform linux/${{ matrix.arch }} node:16 -c "\
          cd /tmp/project && \
          npm install --ignore-scripts && \
          curl -O https://litesync.io/download/litesync-free-linux-armv7.tar.gz && \
          tar xf litesync-free-linux-armv7.tar.gz && \
          sh ./install && \
          npx --no-install prebuild -r node -t 14.0.0 -t 16.0.0 -t 18.0.0 --include-regex 'better_sqlite3.node$'"
      - name: Upload prebuild
        uses: actions/upload-artifact@v3
        with:
          name: prebuild-${{matrix.os}}
          path: prebuilds
